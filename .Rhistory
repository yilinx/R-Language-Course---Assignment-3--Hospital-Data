best <- function(state, outcome) {
readfile <- "outcome-of-care-measures.csv"
OutcomeRead <- read.csv(readfile, na.strings="Not Available")## Read outcome data
StateList <- as.character(names(table(OutcomeRead$State)))
TestStates <- grep(state,StateList)   ## Check States
TestOutcome <- grep(outcome,c("heart attack","heart failure","pneumonia")) ##Check outcome
if (length(TestStates) == 0){
stop("invalid state")
}
if (length(TestOutcome) == 0){
stop("invalid outcome")
}
ReduceOR <- OutcomeRead[,c(2,7,11,17,23)]
names(ReduceOR) <- c("Hospital","State","heart attack","heart failure","pneumonia")
ReduceOR2 <- subset(ReduceOR, State==state, select=c("Hospital","State",outcome))
##bestHosp <- apply(ReduceOR2[,outcome],2,min,na.rm=T)
bestVal <- tapply(ReduceOR2[,outcome],ReduceOR2$State,min,na.rm=T)
##bestHosp <- ReduceOR[ReduceOR[,outcome]==asbestVal,"Hospital"]
bestVal
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
}
best("TX","heart failure")
best <- function(state, outcome) {
readfile <- "outcome-of-care-measures.csv"
OutcomeRead <- read.csv(readfile, na.strings="Not Available")## Read outcome data
StateList <- as.character(names(table(OutcomeRead$State)))
TestStates <- grep(state,StateList)   ## Check States
TestOutcome <- grep(outcome,c("heart attack","heart failure","pneumonia")) ##Check outcome
if (length(TestStates) == 0){
stop("invalid state")
}
if (length(TestOutcome) == 0){
stop("invalid outcome")
}
ReduceOR <- OutcomeRead[,c(2,7,11,17,23)]
names(ReduceOR) <- c("Hospital","State","heart attack","heart failure","pneumonia")
ReduceOR2 <- subset(ReduceOR, State==state, select=c("Hospital",outcome))
bestHosp <- ReduceOR2[min(ReduceOR2[,outcome]),]
##bestVal <- tapply(ReduceOR2[,outcome],ReduceOR2$State,min,na.rm=T)
##bestHosp <- ReduceOR[ReduceOR[,outcome]==asbestVal,"Hospital"]
bestHosp
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
}
best("TX","heart failure")
best <- function(state, outcome) {
readfile <- "outcome-of-care-measures.csv"
OutcomeRead <- read.csv(readfile, na.strings="Not Available")## Read outcome data
StateList <- as.character(names(table(OutcomeRead$State)))
TestStates <- grep(state,StateList)   ## Check States
TestOutcome <- grep(outcome,c("heart attack","heart failure","pneumonia")) ##Check outcome
if (length(TestStates) == 0){
stop("invalid state")
}
if (length(TestOutcome) == 0){
stop("invalid outcome")
}
ReduceOR <- OutcomeRead[,c(2,7,11,17,23)]
names(ReduceOR) <- c("Hospital","State","heart attack","heart failure","pneumonia")
ReduceOR2 <- subset(ReduceOR, State==state, select=c("Hospital",outcome))
bestHosp <- ReduceOR2[ReduceOR2[,outcome]==min(ReduceOR2[,outcome]),]
##bestVal <- tapply(ReduceOR2[,outcome],ReduceOR2$State,min,na.rm=T)
##bestHosp <- ReduceOR[ReduceOR[,outcome]==asbestVal,"Hospital"]
bestHosp
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
}
best("TX","heart failure")
best <- function(state, outcome) {
readfile <- "outcome-of-care-measures.csv"
OutcomeRead <- read.csv(readfile, na.strings="Not Available")## Read outcome data
StateList <- as.character(names(table(OutcomeRead$State)))
TestStates <- grep(state,StateList)   ## Check States
TestOutcome <- grep(outcome,c("heart attack","heart failure","pneumonia")) ##Check outcome
if (length(TestStates) == 0){
stop("invalid state")
}
if (length(TestOutcome) == 0){
stop("invalid outcome")
}
ReduceOR <- OutcomeRead[,c(2,7,11,17,23)]
names(ReduceOR) <- c("Hospital","State","heart attack","heart failure","pneumonia")
ReduceOR2 <- subset(ReduceOR, State==state, select=c("Hospital",outcome))
##bestHosp <- ReduceOR2[ReduceOR2[,outcome]==min(ReduceOR2[,outcome]),]
bestVal <- min(ReduceOR2[,outcome],na.rm)
##bestHosp <- ReduceOR[ReduceOR[,outcome]==asbestVal,"Hospital"]
bestVal
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
}
best("TX","heart failure")
best <- function(state, outcome) {
readfile <- "outcome-of-care-measures.csv"
OutcomeRead <- read.csv(readfile, na.strings="Not Available")## Read outcome data
StateList <- as.character(names(table(OutcomeRead$State)))
TestStates <- grep(state,StateList)   ## Check States
TestOutcome <- grep(outcome,c("heart attack","heart failure","pneumonia")) ##Check outcome
if (length(TestStates) == 0){
stop("invalid state")
}
if (length(TestOutcome) == 0){
stop("invalid outcome")
}
ReduceOR <- OutcomeRead[,c(2,7,11,17,23)]
names(ReduceOR) <- c("Hospital","State","heart attack","heart failure","pneumonia")
ReduceOR2 <- subset(ReduceOR, State==state, select=c("Hospital",outcome))
##bestHosp <- ReduceOR2[ReduceOR2[,outcome]==min(ReduceOR2[,outcome]),]
bestVal <- min(ReduceOR2[,outcome],na.rm=T)
##bestHosp <- ReduceOR[ReduceOR[,outcome]==asbestVal,"Hospital"]
bestVal
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
}
best("TX","heart failure")
best <- function(state, outcome) {
readfile <- "outcome-of-care-measures.csv"
OutcomeRead <- read.csv(readfile, na.strings="Not Available")## Read outcome data
StateList <- as.character(names(table(OutcomeRead$State)))
TestStates <- grep(state,StateList)   ## Check States
TestOutcome <- grep(outcome,c("heart attack","heart failure","pneumonia")) ##Check outcome
if (length(TestStates) == 0){
stop("invalid state")
}
if (length(TestOutcome) == 0){
stop("invalid outcome")
}
ReduceOR <- OutcomeRead[,c(2,7,11,17,23)]
names(ReduceOR) <- c("Hospital","State","heart attack","heart failure","pneumonia")
ReduceOR2 <- subset(ReduceOR, State==state, select=c("Hospital",outcome))
##bestHosp <- ReduceOR2[ReduceOR2[,outcome]==min(ReduceOR2[,outcome]),]
bestVal <- min(ReduceOR2[,outcome],na.rm=T)
bestHosp <- ReduceOR2[ReduceOR[,outcome]==bestVal,"Hospital"]
bestHosp
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
}
best("TX","heart failure")
best <- function(state, outcome) {
readfile <- "outcome-of-care-measures.csv"
OutcomeRead <- read.csv(readfile, na.strings="Not Available")## Read outcome data
StateList <- as.character(names(table(OutcomeRead$State)))
TestStates <- grep(state,StateList)   ## Check States
TestOutcome <- grep(outcome,c("heart attack","heart failure","pneumonia")) ##Check outcome
if (length(TestStates) == 0){
stop("invalid state")
}
if (length(TestOutcome) == 0){
stop("invalid outcome")
}
ReduceOR <- OutcomeRead[,c(2,7,11,17,23)]
names(ReduceOR) <- c("Hospital","State","heart attack","heart failure","pneumonia")
ReduceOR2 <- subset(ReduceOR, State==state, select=c("Hospital",outcome))
##bestHosp <- ReduceOR2[ReduceOR2[,outcome]==min(ReduceOR2[,outcome]),]
bestVal <- min(ReduceOR2[,outcome],na.rm=T)
bestHosp <- ReduceOR2[ReduceOR[,outcome]==bestVal,"Hospital"]
str(bestVal)
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
}
best("TX","heart failure")
best <- function(state, outcome) {
readfile <- "outcome-of-care-measures.csv"
OutcomeRead <- read.csv(readfile, na.strings="Not Available")## Read outcome data
StateList <- as.character(names(table(OutcomeRead$State)))
TestStates <- grep(state,StateList)   ## Check States
TestOutcome <- grep(outcome,c("heart attack","heart failure","pneumonia")) ##Check outcome
if (length(TestStates) == 0){
stop("invalid state")
}
if (length(TestOutcome) == 0){
stop("invalid outcome")
}
ReduceOR <- OutcomeRead[,c(2,7,11,17,23)]
names(ReduceOR) <- c("Hospital","State","heart attack","heart failure","pneumonia")
ReduceOR2 <- subset(ReduceOR, State==state, select=c("Hospital",outcome))
##bestHosp <- ReduceOR2[ReduceOR2[,outcome]==min(ReduceOR2[,outcome]),]
bestVal <- min(ReduceOR2[,outcome],na.rm=T)
bestHosp <- ReduceOR2[ReduceOR[,outcome]==bestVal,"Hospital"]
str(ReduceOR2[,outcome])
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
}
best("TX","heart failure")
best <- function(state, outcome) {
readfile <- "outcome-of-care-measures.csv"
OutcomeRead <- read.csv(readfile, na.strings="Not Available")## Read outcome data
StateList <- as.character(names(table(OutcomeRead$State)))
TestStates <- grep(state,StateList)   ## Check States
TestOutcome <- grep(outcome,c("heart attack","heart failure","pneumonia")) ##Check outcome
if (length(TestStates) == 0){
stop("invalid state")
}
if (length(TestOutcome) == 0){
stop("invalid outcome")
}
ReduceOR <- OutcomeRead[,c(2,7,11,17,23)]
names(ReduceOR) <- c("Hospital","State","heart attack","heart failure","pneumonia")
ReduceOR2 <- subset(ReduceOR, State==state, select=c("Hospital",outcome))
##bestHosp <- ReduceOR2[ReduceOR2[,outcome]==min(ReduceOR2[,outcome]),]
bestVal <- min(ReduceOR2[,outcome],na.rm=T)
bestHosp <- subset[ReduceOR,outcome==bestVal,select="Hospital"]
bestHosp
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
}
best("TX","heart failure")
ReduceOR2[,outcome]
with(airquality, subset(Ozone, Temp > 80))
best <- function(state, outcome) {
readfile <- "outcome-of-care-measures.csv"
OutcomeRead <- read.csv(readfile, na.strings="Not Available")## Read outcome data
StateList <- as.character(names(table(OutcomeRead$State)))
TestStates <- grep(state,StateList)   ## Check States
TestOutcome <- grep(outcome,c("heart attack","heart failure","pneumonia")) ##Check outcome
if (length(TestStates) == 0){
stop("invalid state")
}
if (length(TestOutcome) == 0){
stop("invalid outcome")
}
ReduceOR <- OutcomeRead[,c(2,7,11,17,23)]
names(ReduceOR) <- c("Hospital","State","heart attack","heart failure","pneumonia")
ReduceOR2 <- subset(ReduceOR, State==state, select=c("Hospital",outcome))
##bestHosp <- ReduceOR2[ReduceOR2[,outcome]==min(ReduceOR2[,outcome]),]
bestVal <- min(ReduceOR2[,outcome],na.rm=T)
bestHosp <- subset[ReduceOR2,outcome==bestVal,select="Hospital"]
bestHosp
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
}
best("TX","heart failure")
best <- function(state, outcome) {
readfile <- "outcome-of-care-measures.csv"
OutcomeRead <- read.csv(readfile, na.strings="Not Available")## Read outcome data
StateList <- as.character(names(table(OutcomeRead$State)))
TestStates <- grep(state,StateList)   ## Check States
TestOutcome <- grep(outcome,c("heart attack","heart failure","pneumonia")) ##Check outcome
if (length(TestStates) == 0){
stop("invalid state")
}
if (length(TestOutcome) == 0){
stop("invalid outcome")
}
ReduceOR <- OutcomeRead[,c(2,7,11,17,23)]
names(ReduceOR) <- c("Hospital","State","heart attack","heart failure","pneumonia")
ReduceOR2 <- subset(ReduceOR, State==state, select=c("Hospital",outcome))
##bestHosp <- ReduceOR2[ReduceOR2[,outcome]==min(ReduceOR2[,outcome]),]
bestVal <- min(ReduceOR2[,outcome],na.rm=T)
bestHosp <- subset[ReduceOR2,,select=outcome]
bestHosp
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
}
best("TX","heart failure")
best <- function(state, outcome) {
readfile <- "outcome-of-care-measures.csv"
OutcomeRead <- read.csv(readfile, na.strings="Not Available")## Read outcome data
StateList <- as.character(names(table(OutcomeRead$State)))
TestStates <- grep(state,StateList)   ## Check States
TestOutcome <- grep(outcome,c("heart attack","heart failure","pneumonia")) ##Check outcome
if (length(TestStates) == 0){
stop("invalid state")
}
if (length(TestOutcome) == 0){
stop("invalid outcome")
}
ReduceOR <- OutcomeRead[,c(2,7,11,17,23)]
names(ReduceOR) <- c("Hospital","State","heart attack","heart failure","pneumonia")
ReduceOR2 <- subset(ReduceOR, State==state, select=c("Hospital",outcome))
##bestHosp <- ReduceOR2[ReduceOR2[,outcome]==min(ReduceOR2[,outcome]),]
bestVal <- min(ReduceOR2[,outcome],na.rm=T)
bestHosp <- subset(ReduceOR,outcome==bestVal,select="Hospital")
bestHosp
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
}
best("TX","heart failure")
best <- function(state, outcome) {
readfile <- "outcome-of-care-measures.csv"
OutcomeRead <- read.csv(readfile, na.strings="Not Available")## Read outcome data
StateList <- as.character(names(table(OutcomeRead$State)))
TestStates <- grep(state,StateList)   ## Check States
TestOutcome <- grep(outcome,c("heart attack","heart failure","pneumonia")) ##Check outcome
if (length(TestStates) == 0){
stop("invalid state")
}
if (length(TestOutcome) == 0){
stop("invalid outcome")
}
ReduceOR <- OutcomeRead[,c(2,7,11,17,23)]
names(ReduceOR) <- c("Hospital","State","heart attack","heart failure","pneumonia")
ReduceOR2 <- subset(ReduceOR, State==state, select=c("Hospital",outcome))
##bestHosp <- ReduceOR2[ReduceOR2[,outcome]==min(ReduceOR2[,outcome]),]
bestVal <- min(ReduceOR2[,outcome],na.rm=T)
bestHosp <- subset(ReduceOR2,outcome==bestVal,select="Hospital")
bestHosp
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
}
best("TX","heart failure")
best <- function(state, outcome) {
readfile <- "outcome-of-care-measures.csv"
OutcomeRead <- read.csv(readfile, na.strings="Not Available")## Read outcome data
StateList <- as.character(names(table(OutcomeRead$State)))
TestStates <- grep(state,StateList)   ## Check States
TestOutcome <- grep(outcome,c("heart attack","heart failure","pneumonia")) ##Check outcome
if (length(TestStates) == 0){
stop("invalid state")
}
if (length(TestOutcome) == 0){
stop("invalid outcome")
}
ReduceOR <- OutcomeRead[,c(2,7,11,17,23)]
names(ReduceOR) <- c("Hospital","State","heart attack","heart failure","pneumonia")
ReduceOR2 <- subset(ReduceOR, State==state, select=c("Hospital",outcome))
##bestHosp <- ReduceOR2[ReduceOR2[,outcome]==min(ReduceOR2[,outcome]),]
bestVal <- min(ReduceOR2[,outcome],na.rm=T)
bestHosp <- subset(ReduceOR2,outcome==bestVal,select="Hospital")
ReduceOR2[,outcome]
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
}
best("TX","heart failure")
best <- function(state, outcome) {
readfile <- "outcome-of-care-measures.csv"
OutcomeRead <- read.csv(readfile, na.strings="Not Available")## Read outcome data
StateList <- as.character(names(table(OutcomeRead$State)))
TestStates <- grep(state,StateList)   ## Check States
TestOutcome <- grep(outcome,c("heart attack","heart failure","pneumonia")) ##Check outcome
if (length(TestStates) == 0){
stop("invalid state")
}
if (length(TestOutcome) == 0){
stop("invalid outcome")
}
ReduceOR <- OutcomeRead[,c(2,7,11,17,23)]
names(ReduceOR) <- c("Hospital","State","heart attack","heart failure","pneumonia")
ReduceOR2 <- subset(ReduceOR, State==state, select=c("Hospital",outcome))
##bestHosp <- ReduceOR2[ReduceOR2[,outcome]==min(ReduceOR2[,outcome]),]
bestVal <- min(ReduceOR2[,outcome],na.rm=T)
bestHosp <- subset(ReduceOR2,outcome==bestVal,select="Hospital")
ReduceOR2[,outcome]==bestVal
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
}
best("TX","heart failure")
best <- function(state, outcome) {
readfile <- "outcome-of-care-measures.csv"
OutcomeRead <- read.csv(readfile, na.strings="Not Available")## Read outcome data
StateList <- as.character(names(table(OutcomeRead$State)))
TestStates <- grep(state,StateList)   ## Check States
TestOutcome <- grep(outcome,c("heart attack","heart failure","pneumonia")) ##Check outcome
if (length(TestStates) == 0){
stop("invalid state")
}
if (length(TestOutcome) == 0){
stop("invalid outcome")
}
ReduceOR <- OutcomeRead[,c(2,7,11,17,23)]
names(ReduceOR) <- c("Hospital","State","heart attack","heart failure","pneumonia")
ReduceOR2 <- subset(ReduceOR, State==state, select=c("Hospital",outcome))
##bestHosp <- ReduceOR2[ReduceOR2[,outcome]==min(ReduceOR2[,outcome]),]
bestVal <- min(ReduceOR2[,outcome],na.rm=T)
bestHosp <- subset(ReduceOR2,outcome==bestVal,select="Hospital",na.rm=T)
ReduceOR2[,outcome]==bestVal
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
}
best("TX","heart failure")
best <- function(state, outcome) {
readfile <- "outcome-of-care-measures.csv"
OutcomeRead <- read.csv(readfile, na.strings="Not Available")## Read outcome data
StateList <- as.character(names(table(OutcomeRead$State)))
TestStates <- grep(state,StateList)   ## Check States
TestOutcome <- grep(outcome,c("heart attack","heart failure","pneumonia")) ##Check outcome
if (length(TestStates) == 0){
stop("invalid state")
}
if (length(TestOutcome) == 0){
stop("invalid outcome")
}
ReduceOR <- OutcomeRead[,c(2,7,11,17,23)]
names(ReduceOR) <- c("Hospital","State","heart attack","heart failure","pneumonia")
ReduceOR2 <- subset(ReduceOR, State==state, select=c("Hospital",outcome),na.rm=T)
##bestHosp <- ReduceOR2[ReduceOR2[,outcome]==min(ReduceOR2[,outcome]),]
bestVal <- min(ReduceOR2[,outcome],na.rm=T)
bestHosp <- subset(ReduceOR2,outcome==bestVal,select="Hospital")
ReduceOR2
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
}
best("TX","heart failure")
best <- function(state, outcome) {
readfile <- "outcome-of-care-measures.csv"
OutcomeRead <- read.csv(readfile, na.strings="Not Available")## Read outcome data
StateList <- as.character(names(table(OutcomeRead$State)))
TestStates <- grep(state,StateList)   ## Check States
TestOutcome <- grep(outcome,c("heart attack","heart failure","pneumonia")) ##Check outcome
if (length(TestStates) == 0){
stop("invalid state")
}
if (length(TestOutcome) == 0){
stop("invalid outcome")
}
ReduceOR <- OutcomeRead[,c(2,7,11,17,23)]
names(ReduceOR) <- c("Hospital","State","heart attack","heart failure","pneumonia")
ReduceOR2 <- subset(ReduceOR, State==state, select=c("Hospital",outcome))
ReduceOR2 <- ReduceOR2[complete.cases(ReduceOR2[,outcome]),]
##bestHosp <- ReduceOR2[ReduceOR2[,outcome]==min(ReduceOR2[,outcome]),]
bestVal <- min(ReduceOR2[,outcome],na.rm=T)
bestHosp <- subset(ReduceOR2,outcome==bestVal,select="Hospital")
ReduceOR2
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
}
best("TX","heart failure")
best <- function(state, outcome) {
readfile <- "outcome-of-care-measures.csv"
OutcomeRead <- read.csv(readfile, na.strings="Not Available")## Read outcome data
StateList <- as.character(names(table(OutcomeRead$State)))
TestStates <- grep(state,StateList)   ## Check States
TestOutcome <- grep(outcome,c("heart attack","heart failure","pneumonia")) ##Check outcome
if (length(TestStates) == 0){
stop("invalid state")
}
if (length(TestOutcome) == 0){
stop("invalid outcome")
}
ReduceOR <- OutcomeRead[,c(2,7,11,17,23)]
names(ReduceOR) <- c("Hospital","State","heart attack","heart failure","pneumonia")
ReduceOR2 <- subset(ReduceOR, State==state, select=c("Hospital",outcome))
ReduceOR2 <- ReduceOR2[complete.cases(ReduceOR2[,outcome]),]
##bestHosp <- ReduceOR2[ReduceOR2[,outcome]==min(ReduceOR2[,outcome]),]
bestVal <- min(ReduceOR2[,outcome],na.rm=T)
bestHosp <- subset(ReduceOR2,outcome==bestVal,select="Hospital")
bestHosp
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
}
best("TX","heart failure")
debugSource('E:/Coursera Data Scientist/R Programming/Programming Assignment 3/best-2.R', echo=TRUE)
best("TX","heart failure")
best <- function(state, outcome) {
readfile <- "outcome-of-care-measures.csv"
OutcomeRead <- read.csv(readfile, na.strings="Not Available")## Read outcome data
StateList <- as.character(names(table(OutcomeRead$State)))
TestStates <- grep(state,StateList)   ## Check States
TestOutcome <- grep(outcome,c("heart attack","heart failure","pneumonia")) ##Check outcome
if (length(TestStates) == 0){
stop("invalid state")
}
if (length(TestOutcome) == 0){
stop("invalid outcome")
}
ReduceOR <- OutcomeRead[,c(2,7,11,17,23)]
names(ReduceOR) <- c("Hospital","State","heart attack","heart failure","pneumonia")
ReduceOR2 <- subset(ReduceOR, State==state, select=c("Hospital",outcome))
ReduceOR2 <- ReduceOR2[complete.cases(ReduceOR2[,outcome]),]
##bestHosp <- ReduceOR2[ReduceOR2[,outcome]==min(ReduceOR2[,outcome]),]
bestVal <- min(ReduceOR2[,outcome],na.rm=T)
bestHosp <- subset(ReduceOR2,outcome=bestVal,select="Hospital")
bestHosp
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
}
best("TX","heart failure")
best <- function(state, outcome) {
readfile <- "outcome-of-care-measures.csv"
OutcomeRead <- read.csv(readfile, na.strings="Not Available")## Read outcome data
StateList <- as.character(names(table(OutcomeRead$State)))
TestStates <- grep(state,StateList)   ## Check States
TestOutcome <- grep(outcome,c("heart attack","heart failure","pneumonia")) ##Check outcome
if (length(TestStates) == 0){
stop("invalid state")
}
if (length(TestOutcome) == 0){
stop("invalid outcome")
}
ReduceOR <- OutcomeRead[,c(2,7,11,17,23)]
names(ReduceOR) <- c("Hospital","State","heart attack","heart failure","pneumonia")
ReduceOR2 <- subset(ReduceOR, State==state, select=c("Hospital",outcome))
ReduceOR2 <- ReduceOR2[complete.cases(ReduceOR2[,outcome]),]
##bestHosp <- ReduceOR2[ReduceOR2[,outcome]==min(ReduceOR2[,outcome]),]
bestVal <- min(ReduceOR2[,outcome],na.rm=T)
bestHosp <- ReduceOR2[outcome=BestVal,]
bestHosp
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
}
best("TX","heart failure")
